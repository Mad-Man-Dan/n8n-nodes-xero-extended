---
description: 
globs: 
alwaysApply: false
---
Detect Context & Scope

Know when you are inside a .ts file for an n8n node. Only suggest code that fits into that files existing imports, class structure, or function scope.

Stick to TypeScript & n8n Conventions
Always use TypeScript types/interfaces (e.g. INodeType, INodeProperties, INodeExecutionResponse).
Follow n8n naming (PascalCase for classes, camelCase for methods/props).
Import Correct Modules
Pull in exactly what you need from n8n-core, n8n-workflow or other relevant packages—never guess or over-import.
Only generate the chunk that belongs at the cursor point. Dont re-emit the entire boilerplate class or duplicated sections.
Use Async/Await & Proper Error Handling
Default any API or IO calls to async/await.
Wrap failures in NodeOperationError or WorkflowOperationError as per n8n docs.
JSDoc & Inline Comments
Preface new methods or complex blocks with concise TSDoc comments.
Dont over-comment trivial one-liners.
Parameter Definitions First
When you sense the user is defining an operation or field, lead with an INodeProperties object describing label, type, options, etc.
Ask Before You Leap
If critical details are missing (auth type, resource name, expected output shape), prompt for clarification instead of guessing.
Minimal, Clear Diffs
Show only whats new or changed. Use context lines sparingly so the user can stitch it in easily.
 Align with User Style
  Mirror existing code formatting, indent size, semicolon usage—follow whatever lint/prettier rules are already in place.
+  • Multi-line formatting: never compress an entire field into one line.
+    Good:
+    ```ts
+    {
+        displayName: 'Contact Type',
+        name: 'contact_type',
+        type: 'string',
+        default: '',
+        routing: { send: { property: 'contact_type', type: 'query' } },
+    }
+    ```
+    Bad:
+    ```ts
+    { displayName: 'Prefix', name: 'prefix', type: 'string', default: '', routing: { send: { property: 'prefix', type: 'body' } } },
+    ```

==========

 Detect Context & Scope

+  UI Element Types
+  When adding INodeProperties, use these built-in n8n types:
+  - string
+    - password (via `typeOptions.password`)
+    - multi-line (via `typeOptions.rows`)
+  - number
+  - boolean
+  - dateTime
+  - color
+  - options
+  - multiOptions
+  - collection
+  - fixedCollection
+  - filter
+  - assignmentCollection
+  - resourceLocator
+  - resourceMapper
+  - json
+  - html (with `typeOptions.editor: 'htmlEditor'`)
+  - notice
+
+  For drag-and-drop data mapping, add `requiresDataPath: 'single' | 'multiple'`.
+  Use the `hint` property for parameter hints, and the `hints` array in your `description` for node-wide hints.

=========

Collection#
Use the collection type when you need to display optional fields.


{
	displayName: 'Filters',
	name: 'filters',
	type: 'collection',
	placeholder: 'Add Field',
	default: {},
	options: [
		{
			displayName: 'Type',
			name: 'type',
			type: 'options',
			options: [
				{
					name: 'Automated',
					value: 'automated',
				},
				{
					name: 'Past',
					value: 'past',
				},
				{
					name: 'Upcoming',
					value: 'upcoming',
				},
			],
			default: '',
		},
	],
	displayOptions: { // the resources and operations to display this element with
		show: {
			resource: [
				// comma-separated list of resource names
			],
			operation: [
				// comma-separated list of operation names
			]
		}
	},
}
==========

For multi items use formatting to have multipleValues enabled. Here's an example:

{
    displayName: 'Line Items',
    name: 'lineItemsUi',
    placeholder: 'Add Line Item',
    type: 'fixedCollection',
    default: {},
    typeOptions: {
        multipleValues: true,
    },
    displayOptions: {
        show: {
            resource: ['invoice'],
            operation: ['create'],
        },
    },
    description: 'Line item data',
    options: [
        {
            name: 'lineItemsValues',
            displayName: 'Line Item',
            values: [
                {
                    displayName: 'Description',
                    name: 'description',
                    type: 'string',
                    default: '',
                    description: 'A line item with just a description',
                },
                {
                    displayName: 'Quantity',
                    name: 'quantity',
                    type: 'number',
                    default: 1,
                    typeOptions: {
                        minValue: 1,
                    },
                    description: 'LineItem Quantity',
                },
                {
                    displayName: 'Unit Amount',
                    name: 'unitAmount',
                    type: 'string',
                    default: '',
                    description: 'Line item unit amount. By default, unit amount will be rounded to two decimal places.',
                },
                {
                    displayName: 'Item Code Name or ID',
                    name: 'itemCode',
                    type: 'options',
                    description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code/expressions/">expression</a>',
                    typeOptions: {
                        loadOptionsMethod: 'getItemCodes',
                        loadOptionsDependsOn: ['organizationId'],
                    },
                    default: '',
                },
                {
                    displayName: 'Account Code Name or ID',
                    name: 'accountCode',
                    type: 'options',
                    description: 'Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code/expressions/">expression</a>',
                    typeOptions: {
                        loadOptionsMethod: 'getAccountCodes',
                        loadOptionsDependsOn: ['organizationId'],
                    },
                    default: '',
                },
                {
                    displayName: 'Tax Type',
                    name: 'taxType',
                    type: 'options',
                    options: [
                        { name: 'Tax on Purchases', value: 'INPUT' },
                        { name: 'Tax Exempt',    value: 'NONE'  },
                        { name: 'Tax on Sales',  value: 'OUTPUT'},
                        { name: 'Sales Tax on Imports', value: 'GSTONIMPORTS' },
                    ],
                    default: '',
                    required: true,
                },
                {
                    displayName: 'Tax Amount',
                    name: 'taxAmount',
                    type: 'string',
                    default: '',
                    description: 'The tax amount is auto calculated as a percentage of the line amount based on the tax rate',
                },
                {
                    displayName: 'Line Amount',
                    name: 'lineAmount',
                    type: 'string',
                    default: '',
                    description: 'The line amount reflects the discounted price if a DiscountRate has been used',
                },
                {
                    displayName: 'Discount Rate',
                    name: 'discountRate',
                    type: 'string',
                    default: '',
                    description: 'Percentage discount or discount amount being applied to a line item. Only supported on ACCREC invoices - ACCPAY invoices and credit notes in Xero do not support discounts.',
                },
            ],
        },
    ],
},


=========